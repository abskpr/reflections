What happens when you initialize a repository? Why do you need to do it?
	
	When we initialize a repository, a .git directory is created which contains metadata 
	of various stages of files. We need to initialize the repository for version control.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	Staging area is different from the working directory and the repository as 
	staging area contains the files to be committed while working directory 
	indicates the directory we are currently operating on and repository 
	contains all the files. Staging are gives us control to decides which files
	should be committed during the commit.
	
How can you use the staging area to make sure you have one commit per logical
change?
	
	I can use staging area to make sure that I have one commit per logical change
	by temporarily adding the changed file to staging area and then checking the 
	status using the 'git status' to verify that only one logical change is ready to be 
	committed.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	Some situations when branches would be helpful in keeping my history organized
	are making experiments with the code, creating versions for different locales etc.
	These branches would help in my quest as in case of any catastrophe I always 
	have the option to revert back.
	
How do the diagrams help you visualize the branch structure?
	
	Diagrams displays the changes and the path taken during the course of
	development and leaves nothing to imagination. So, I can see the parent 
	of each commit and later use the information for checkout.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	When we merge two branches new additions and old ones are kept and deleted
	ones are removed. We represent it in the diagram in the way we do as it makes
	it easier to visualize the changes during the commit.
	
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	pros:
				1) Reduces the work of developers.
				2) Converts a tedious task to an easy task using automation.
	cons:
				1) It is not always able to commit successfully.